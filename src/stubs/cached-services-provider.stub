<?php

namespace App\Providers;

use Illuminate\Support\Facades\Config;
use Illuminate\Support\ServiceProvider;

class CachedServicesServiceProvider extends ServiceProvider
{
    /** @var array */
    protected $cachedServices = [];

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        $this->bindCachedServices();
    }

    /**
     * Bind any cached services in the service container.
     */
    private function bindCachedServices()
    {
        $cachedServices = empty($this->cachedServices) ? Config::get('service-classes.cached_services.classes') : $this->cachedServices;

        collect($this->cachedServices)->each(function ($cachedService) {
            $this->app->singleton($cachedService, function ($app) use ($cachedService) {
                $service = $app->make($this->getServiceFromCachedService($cachedService));

                return new $cachedService($service);
            });
        });
    }

    /**
     * Get the base service name from the cached service name.
     *
     * @param  string  $service
     *
     * @return string
     */
    private function getServiceFromCachedService($service)
    {
        $prefix = Config::get('service-classes.cached_services.prefix');
        $cachedServiceBasename = class_basename($service);
        $name = str_replace($prefix, '', $cachedServiceBasename);

        $baseService = str_replace('\\'.Config::get('service-classes.cached_services.namespace'), '', $service);

        return str_replace($cachedServiceBasename, $name, $baseService).Config::get('service-classes.suffix');
    }
}
